package timeClock;import mysqlConnect.MysqlDbConnect;import javax.swing.*;import java.awt.*;import java.awt.geom.Ellipse2D.Double;import java.awt.geom.Rectangle2D;import java.sql.ResultSet;import java.sql.SQLException;import java.util.Timer;import java.util.TimerTask;public class ClockPanel extends AncestorPanel{    private Image imageBuffer;    private Graphics2D graphicsBuffer;    private Color clockPanelColor = Color.ORANGE;    private Color clockContentColor = Color.PINK;    private Color clockRingColor = new Color(0, 0, 160);    private Color hourPointerColor = Color.BLACK;    private Color minutePointerColor = Color.BLUE;    private Color secondPointerColor = Color.RED;    private Color dialGaugeColor = Color.BLACK;  //时钟指示数字颜色    private int minLength;    final int RADIX = 60;    boolean isInit; //是否之前已经绘制过表环，为了提高响应速度，只重新绘制时间，即时针、分针、秒针    private boolean isQuerid = false;    public Color getColor(String type)    {        Color color = null;        switch (type)        {            case "clockpanel":                color = clockPanelColor;                break;            case "clockring":                color = clockRingColor;                break;            case "clockcontent":                color = clockContentColor;                break;            case "hourpointer":                color = hourPointerColor;                break;            case "minutepointer":                color = minutePointerColor;                break;            case "secondpointer":                color = secondPointerColor;                break;            case "dialgauge":                color = dialGaugeColor;                break;        }        return color;    }    public ClockPanel()    {        //        super();        //        setSize(new Dimension(400, 400));        setLayout(null);    }    public void updateColor(Color updateColor, String type)    {        switch (type)        {            case "clockpanel":                clockPanelColor = updateColor;                break;            case "clockcontent":                clockContentColor = updateColor;                break;            case "clockring":                clockRingColor = updateColor;                break;            case "hourpointer":                hourPointerColor = updateColor;                break;            case "minutepointer":                minutePointerColor = updateColor;                break;            case "secondpointer":                secondPointerColor = updateColor;                break;            case "dialgauge":                dialGaugeColor = updateColor;                break;        }    }    public void queryClockColorFromDb()    {        if (isQuerid)        {            return;        }        String sqlString = "select red,green,blue ,type from clockColor";        MysqlDbConnect dbConnect = new MysqlDbConnect();        ResultSet resultSet = dbConnect.getResultSet(sqlString);        try        {            while (resultSet.next())            {                Color color = new Color(resultSet.getInt(1),                        resultSet.getInt(2), resultSet.getInt(3));                String type = resultSet.getString("type");                switch (type)                {                    case "clockpanel":                        clockPanelColor = color;                        break;                    case "clockring":                        clockRingColor = color;                        break;                    case "clockcontent":                        clockContentColor = color;                        break;                    case "hourpointer":                        hourPointerColor = color;                        break;                    case "minutepointer":                        minutePointerColor = color;                        break;                    case "secondpointer":                        secondPointerColor = color;                        break;                    case "dialgauge":                        dialGaugeColor = color;                    default:                        break;                }            }        }        catch (SQLException e)        {            // TODO Auto-generated catch block            e.printStackTrace();        }        dbConnect.closeConnection();        isQuerid = true;    }    public static void main(String[] args)    {        final ClockPanel clockPanel = new ClockPanel();        clockPanel.queryClockColorFromDb();        JFrame frame = new JFrame();        frame.setSize(new Dimension(440, 484));        frame.getContentPane().add(clockPanel);        frame.setVisible(true);        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);        Timer timer = new Timer();        timer.schedule(new TimerTask()        {            @Override            public void run()            {                clockPanel.repaint();            }        }, 3000, 1000);        //        clockPanel.setVisible(true);    }    public void paint(Graphics g)    {	/*	if (imageBuffer == null)        {			imageBuffer = createImage(getSize().width, getSize().height);		}		graphicsBuffer = (Graphics2D) imageBuffer.getGraphics();*/        //        System.out.println("paint");        graphicsBuffer = (Graphics2D) g;        minLength = getSize().width > getSize().height ? getSize().height                : getSize().width;        graphicsBuffer.setColor(clockPanelColor);        graphicsBuffer.fillRect(0, 0, getSize().width, getSize().height);        drawIndexDial(graphicsBuffer);        drawDialGauge(graphicsBuffer);        drawTimePointer(graphicsBuffer);    }    /**     * 绘制时钟表环以及时钟面板的颜色     *     * @param graphics2d     */    private void drawIndexDial(Graphics2D graphics2d)    {        double radiux = 0.8 * minLength;        graphics2d.setPaint(clockRingColor);        //        graphics2d.setPaint(Color.ORANGE);        graphics2d.setStroke(new BasicStroke(10.0f));        double ellipseX = 0.1 * minLength;        double ellipseY = 0.1 * minLength;        double ellipseWidth = radiux;        double ellipseHeight = radiux;      /*  graphics2d.draw(new Double(ellipseX, ellipseY, ellipseWidth,                ellipseHeight));*/        graphics2d.drawOval((int) ellipseX, (int) ellipseY, (int) ellipseWidth, (int) ellipseHeight);        graphics2d.setPaint(clockContentColor);        graphics2d.fill(new Double(ellipseX, ellipseY, ellipseWidth,                ellipseHeight));    }    private void drawDialGauge(Graphics2D g2d)    {        g2d.setStroke(new BasicStroke(1.3f));        double centerX = 0.5 * minLength;        double centerY = 0.5 * minLength;        double radius = 0.4 * minLength;        g2d.setColor(Color.BLACK);        double x1[] = new double[RADIX];        double y1[] = new double[RADIX];        double x2[] = new double[RADIX];        double y2[] = new double[RADIX];        Color preColor = g2d.getColor();        Font preFont = g2d.getFont();        g2d.setColor(dialGaugeColor);        g2d.setFont(new Font("jinti", Font.BOLD, 34));        for (int i = 0; i < RADIX; i++)        {            double arc = i * Math.PI / 30;            x1[i] = centerX + radius * Math.cos(arc);            y1[i] = centerY + radius * Math.sin(arc);            if (i % 5 == 0)            {                x2[i] = centerX + 0.85 * radius * Math.cos(arc);                y2[i] = centerY + 0.85 * radius * Math.sin(arc);                int digit = i / 5;                digit = (digit + 3) % 12;                digit = digit == 0 ? 12 : digit;                Rectangle2D.Float fontBounds =                        (Rectangle2D.Float) g2d.getFont().getStringBounds(digit + "", g2d.getFontRenderContext());                float digitLocX = (float) (centerX + 0.72 * radius * Math.cos(arc) - fontBounds.getWidth() / 2);                float digitLocY = (float) (centerY + 0.72 * radius * Math.sin(arc) +                        fontBounds.getHeight() / 3);                g2d.drawString(digit + "", digitLocX, digitLocY);            }            else            {                x2[i] = centerX + 0.9 * radius * Math.cos(arc);                y2[i] = centerY + 0.9 * radius * Math.sin(arc);            }        }        g2d.setColor(preColor);        g2d.setFont(preFont);        for (int i = 0; i < x1.length; i++)        {            g2d.drawLine((int) x1[i], (int) y1[i], (int) x2[i], (int) y2[i]);        }    }    private void drawTimePointer(Graphics2D g2d)    {        double centerX = 0.5 * minLength;        double centerY = 0.5 * minLength;        double radius = 0.4 * minLength;        GetTime time = new GetTime();        int hour = time.hour;        int minute = time.minute;        int second = time.getSecond();        g2d.setStroke(new BasicStroke(2.0f));        g2d.setColor(secondPointerColor);        double secondGauge = (second + 45) % 60 * Math.PI / 30;        g2d.drawLine((int) centerX, (int) centerY, (int) (centerX + 0.9                * radius * Math.cos(secondGauge)), (int) (centerY + 0.9                * radius * Math.sin(secondGauge)));        g2d.setStroke(new BasicStroke(3.0f));        g2d.setPaint(minutePointerColor);        double minuteGauge = (minute + 45 + second / 60.0) % 60 * Math.PI / 30;        g2d.drawLine((int) centerX, (int) centerY, (int) (centerX + 0.65                * radius * Math.cos(minuteGauge)), (int) (centerY + 0.65                * radius * Math.sin(minuteGauge)));        g2d.setStroke(new BasicStroke(4.5f));        g2d.setPaint(hourPointerColor);        double hourGauge = ((hour % 12 + minute / 60.0) * 5 + 45) % 60 * Math.PI                / 30;        g2d.drawLine((int) centerX, (int) centerY, (int) (centerX + 0.4                * radius * Math.cos(hourGauge)), (int) (centerY + 0.4 * radius                * Math.sin(hourGauge)));    }}